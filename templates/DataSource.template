{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Enterprise Accelerator - Provides nesting for required stacks to deploy a full sample web application with reverse proxy, ELBs, IAM, and other resources (for demonstration/POC/testing) QS(0018)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "AWS Security"
                    },
                    "Parameters": [
                        "KeyPair"
                    ]
                },
                {
                    "Label": {
                        "default": "Storage"
                    },
                    "Parameters": [
                        "SupportsGlacier"
                    ]
                },
                {
                    "Label": {
                        "default": "EMR"
                    },
                    "Parameters": [
                        "CreateEmr",
                        "EmrSubnetA"
                    ]
                },
                {
                    "Label": {
                        "default": "Redshift Configurations"
                    },
                    "Parameters": [
                        "CreateRedshift",
                        "RedshiftSubnetA",
                        "RedshiftSubnetB",
						"RedshiftUsername",						
                        "RedshiftPassword",
						"RedshiftDbName",
						"RedshiftPort"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "KeyPair": {
            "Description": "Key Name for Instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "EmrSubnetA": {
            "Description": "EMR Subnet A",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "RedshiftSubnetA": {
            "Description": "Redshift subnet A",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "RedshiftSubnetB": {
            "Description": "Redshift subnet B",
            "Type": "AWS::EC2::Subnet::Id"
        },
		"RedshiftUsername": {
            "Description": "RedShift Username",
            "Type": "String"
        },
		
        "RedshiftPassword": {
            "Description": "RedShift Password",
            "NoEcho": true,
            "Type": "String"
        },
		"RedshiftDbName": {
            "Description": "RedShift Database name",
            "Type": "String"
        },
		"RedshiftPort": {
            "Description": "RedShift Port",
            "Type": "String",
			"Default": "5439"
        },
        "SupportsGlacier": {
            "Description": "Does this region support Glacier",
            "Type": "String",
            "Default": "true"
        },
        "CreateRedshift": {
            "Description": "Create Redshift.",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "CreateEmr": {
            "Description": "Create EMR.",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ]
        }
    },
    "Mappings": {
    },
    "Conditions": {
        "IsGovCloud": {
            "Fn::Equals": [
                { "Ref": "AWS::Region" },
                "us-gov-west-1"
            ]
        },
        "SupportsGlacierCondition": {
            "Fn::Equals": [
                { "Ref": "SupportsGlacier" },
                true
            ]
        },
        "CreateRedshiftCondition": {
            "Fn::Equals": [
                { "Ref": "CreateRedshift" },
                "true"
            ]
        },
        "CreateEmrCondition": {
            "Fn::Equals": [
                { "Ref": "CreateEmr" },
                "true"
            ]
        }
    },
    "Resources": {
        "TalendStorageBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "Id": "Transition90daysRetain7yrs",
                            "Status": "Enabled",
                            "ExpirationInDays": 2555,
                            "Transition": {
                                "TransitionInDays": 90,
                                "StorageClass": {
                                    "Fn::If": [
                                        "SupportsGlacierCondition",
                                        "GLACIER",
                                        "STANDARD_IA"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "DeletionPolicy": "Delete",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "513fe052-d06e-4678-a16a-19021407af29"
                }
            }
        },
        "TalendStorageS3Policy": {
            "Type": "AWS::S3::BucketPolicy",
            "DependsOn": "TalendStorageBucket",
            "Properties": {
                "Bucket": {
                    "Ref": "TalendStorageBucket"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Sid": "EnforceSecureTransport",
                            "Action": "s3:*",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:${Endpoint}:s3:::${TalendStorageBucket}",
                                    {
                                        "Endpoint": {
                                            "Fn::If": [
                                                "IsGovCloud",
                                                "aws-us-gov",
                                                "aws"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            }
                        },
                        {
                            "Sid": "EnforceEncryptionOnPut",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:${Endpoint}:s3:::${TalendStorageBucket}/*",
                                    {
                                        "Endpoint": {
                                            "Fn::If": [
                                                "IsGovCloud",
                                                "aws-us-gov",
                                                "aws"
                                            ]
                                        }
                                    }
                                ]
                            },
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "AES256"
                                }
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6cf08e46-6787-42f0-8a21-4947f424ad24"
                }
            }
        },
        
        "RedhsiftSubnetGroup": {
            "Type": "AWS::Redshift::ClusterSubnetGroup",
            "Condition": "CreateRedshiftCondition",
            "Properties": {
                "Description": "RedShift Subnet linked to both private database subnets",
                "SubnetIds": [
                    {
                        "Ref": "RedshiftSubnetA"
                    },
                    {
                        "Ref": "RedshiftSubnetB"
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3b9902b0-0fd2-431b-89e1-7d2ab3358313"
                }
            }
        },
        "RedShiftInstance": {
            "Type": "AWS::Redshift::Cluster",
            "Condition": "CreateRedshiftCondition",
            "Properties": {
                "ClusterSubnetGroupName": {
                    "Ref": "RedhsiftSubnetGroup"
                },
                "ClusterType": "single-node",
                "NodeType": "dc1.large",
                "DBName": {
                    "Ref": "RedshiftDbName"
                },
                "MasterUsername": {
                    "Ref": "RedshiftUsername"
                },
                "MasterUserPassword": {
                    "Ref": "RedshiftPassword"
                },
                "Port": {
                    "Ref": "RedshiftPort"
                },
                "PubliclyAccessible": false
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "501dbf3c-015d-4d63-ad59-96efdc50c822"
                }
            },
            "DependsOn": [
                "RedhsiftSubnetGroup"
            ]
        },
        "EmrInstance": {
            "Type": "AWS::EMR::Cluster",
            "Condition": "CreateEmrCondition",
            "Properties": {
                "Instances": {
                    "MasterInstanceGroup": {
                        "InstanceCount": 1,
                        "InstanceType": "m4.large",
                        "Market": "ON_DEMAND",
                        "Name": "Master instance group - 1"
                    },
                    "CoreInstanceGroup": {
                        "InstanceCount": 1,
                        "InstanceType": "m4.large",
                        "Market": "ON_DEMAND",
                        "Name": "Core instance group - 2"
                    },
                    "TerminationProtected": false,
                    "Ec2SubnetId": {
                        "Ref": "EmrSubnetA"
                    },
                    "Ec2KeyName": {
                        "Ref": "KeyPair"
                    }
                },
                "Applications": [
                    {
                        "Name": "Hadoop"
                    },
                    {
                        "Name": "Hive"
                    },
                    {
                        "Name": "Pig"
                    },
                    {
                        "Name": "Spark"
                    }
                ],
                "ReleaseLabel": "emr-5.0.0",
                "Name": "EmrInstance",
                "JobFlowRole": "EMR_EC2_DefaultRole",
                "ServiceRole": "EMR_DefaultRole",
                "VisibleToAllUsers": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "emr-instance-",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    ""
                                ]
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "02fe4f4a-7d84-4ccf-85d9-3cdf97f4d02b"
                }
            }
        }
    },
    "Outputs": {
		"TalendS3DomainName": {
            "Value": { "Fn::GetAtt": ["TalendStorageBucket","DomainName"] }
        },
		"EmrMasterPublicDns": {
			"Condition": "CreateEmrCondition",
            "Value": { "Fn::GetAtt": ["EmrInstance","MasterPublicDNS"] }
        },
		"RedshiftJdbcUrl": {
			"Condition": "CreateRedshiftCondition",
			"Value": {
                "Fn::Sub": "jdbc:redshift://${RedShiftInstance.Endpoint.Address}:${RedshiftPort}/${RedshiftPort}"
            }
        }
    }
}

